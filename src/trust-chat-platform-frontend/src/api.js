import { Actor, HttpAgent } from "@dfinity/agent";

// レジストリキャニスターIDを明示的に設定
const registryCanisterId = "53qip-2yaaa-aaaab-qac2a-cai";

// エージェントの設定
const agent = new HttpAgent({
  host: "https://icp0.io",
});

// レジストリキャニスターのインターフェース定義
const registryIdlFactory = ({ IDL }) => {
  const ModelInfo = IDL.Record({
    'id': IDL.Text,
    'name': IDL.Text,
    'description': IDL.Text,
    'provider': IDL.Text,
    'canister_id': IDL.Principal,
    'pricing': IDL.Text,
    'created_at': IDL.Nat64,
  });
  return IDL.Service({
    'register_model': IDL.Func([ModelInfo], [IDL.Variant({ 'Ok': IDL.Null, 'Err': IDL.Text })], []),
    'list_models': IDL.Func([], [IDL.Vec(ModelInfo)], ['query']),
    'get_model': IDL.Func([IDL.Text], [IDL.Opt(ModelInfo)], ['query']),
  });
};

// モデルキャニスターのインターフェース定義
const modelIdlFactory = ({ IDL }) => {
  const ModelConfig = IDL.Record({
    'name': IDL.Text,
    'description': IDL.Text,
    'provider': IDL.Text,
    'api_endpoint': IDL.Text,
    'api_key': IDL.Text,
    'pricing': IDL.Text,
  });
  const ChatMessage = IDL.Record({
    'role': IDL.Text,
    'content': IDL.Text,
  });
  return IDL.Service({
    'initialize': IDL.Func([ModelConfig], [], []),
    'get_model_info': IDL.Func([], [ModelConfig], ['query']),
    'chat': IDL.Func([IDL.Text], [IDL.Text], []),
    'get_chat_history': IDL.Func([], [IDL.Vec(ChatMessage)], ['query']),
  });
};

// レジストリキャニスターのアクターを作成
const registryActor = Actor.createActor(registryIdlFactory, {
  agent,
  canisterId: registryCanisterId,
});

// モデルキャニスターのアクターを作成する関数
function createModelActor(canisterId) {
  return Actor.createActor(modelIdlFactory, {
    agent,
    canisterId,
  });
}

// モックデータ（レジストリが空の場合に使用）
const mockModels = [
  {
    id: "gpt4-mini",
    name: "GPT-4 Mini",
    description: "OpenAI GPT-4 Mini model with fine-tuned parameters",
    provider: "OpenAI",
    canister_id: "4n3qe-piaaa-aaaab-qac7a-cai",
    pricing: "Free",
    created_at: BigInt(Date.now() * 1000000)
  },
  {
    id: "claude",
    name: "Claude 3.5 Sonnet",
    description: "Anthropic Claude 3.5 Sonnet with enhanced reasoning",
    provider: "Anthropic",
    canister_id: "uy3uz-syaaa-aaaab-qadka-cai",
    pricing: "Free",
    created_at: BigInt(Date.now() * 1000000)
  },
  {
    id: "o1-mini",
    name: "O1 Mini",
    description: "OpenAI O1 Mini model with custom parameters",
    provider: "OpenAI",
    canister_id: "7gngh-jqaaa-aaaab-qacvq-cai",
    pricing: "Free",
    created_at: BigInt(Date.now() * 1000000)
  }
];

// モックAPIサービス

// モデル一覧を取得
export const listModels = async () => {
  // モックデータを返す
  await new Promise(resolve => setTimeout(resolve, 800)); // 遅延をシミュレート
  
  return [
    {
      id: 'gpt4o-1',
      name: 'GPT-4o',
      character_name: 'Helpful Assistant',
      base_model: 'gpt4o',
      description: 'A helpful, harmless, and honest AI assistant powered by GPT-4o.',
      provider: 'OpenAI',
      trust_score: 8.5
    },
    {
      id: 'claude-opus-1',
      name: 'Claude 3 Opus',
      character_name: 'Claude',
      base_model: 'claude-3-opus',
      description: 'Advanced reasoning and complex task handling with Claude 3 Opus.',
      provider: 'Anthropic',
      trust_score: 9.2
    },
    {
      id: 'llama3-1',
      name: 'Llama 3',
      character_name: 'Llama Assistant',
      base_model: 'llama-3',
      description: 'Open source AI assistant powered by Meta\'s Llama 3 model.',
      provider: 'Meta AI',
      trust_score: 7.8
    }
  ];
};

// モデルを選択
export const selectModel = async (modelId) => {
  await new Promise(resolve => setTimeout(resolve, 300));
  return { success: true };
};

// モデルを検証
export const verifyModel = async (modelId) => {
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  // モックデータを返す
  return {
    moduleHash: '0x8f7d3e9b2f7a1c5d6e4b3a2c1d0e9f8a7b6c5d4e3f2a1b0',
    controllers: ['efz2i-fyaaa-aaaab-qacpa-cai', 'OpenAI Foundation'],
    trustScore: 8.5,
    lastAudit: '2023-12-15',
    auditor: 'IC Security Labs',
    codeScore: 8,
    securityScore: 9,
    apiScore: 7,
    communityScore: 8,
    transparencyScore: 9,
    scoreUpdatedAt: '2024-06-01'
  };
};

// チャット履歴を取得
export const getChatHistory = async (modelId) => {
  await new Promise(resolve => setTimeout(resolve, 800));
  
  // 空のチャット履歴を返す
  return [];
};

// モデル情報を取得
export const getModelInfo = async (modelId) => {
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // モックデータを返す
  const models = await listModels();
  return models.find(model => model.id === modelId) || null;
};

// メッセージを送信
export const sendMessage = async (modelId, message) => {
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // モックレスポンスを返す
  return {
    role: 'assistant',
    content: `This is a mock response to your message: "${message}". In a real application, this would be generated by the AI model.`
  };
};

// APIオブジェクトとしてエクスポート
export const api = {
  listModels,
  selectModel,
  verifyModel,
  getChatHistory,
  getModelInfo,
  sendMessage
};